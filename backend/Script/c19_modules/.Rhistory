snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- gene_conversion$ensembl_gene_id[c(33:41)]
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- gene_conversion$ensembl_gene_id[c(33:41)]
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- gene_conversion$ensembl_gene_id[c(34:41)]
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- gene_conversion$ensembl_gene_id[c(34:41)]
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- gene_conversion$ensembl_gene_id[c(34:41)]
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
snp_results_df <- do.call(rbind, snp_results_list)
length(unique(snp_results_df$ensembl_gene_name))
#write.table(snp_results_df, "/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/merged_snps.txt", row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- gene_conversion$ensembl_gene_id[c(34:41)]
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
snp_results_df <- do.call(rbind, snp_results_list)
length(unique(snp_results_df$ensembl_gene_name))
#write.table(snp_results_df, "/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/merged_snps.txt", row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
write.table(snp_results_df, "/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/merged_snps34_41.txt", row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
gene_df2 <- read.delim('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/merged_snps34_41.txt',header = T,sep = '\t')
gene_df <- rbind(gene_df1,gene_df2)
gene_df1 <- read.delim('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/merged_snps27.txt',header = T,sep = '\t')
gene_df2 <- read.delim('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/merged_snps34_41.txt',header = T,sep = '\t')
gene_df <- rbind(gene_df1,gene_df2)
length(unique(gene_df$ensembl_gene_name))
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
unique(gene_df$ensembl_gene_name)
setdiff(gene_conversion$entrezgene_id,unique(gene_df$ensembl_gene_name)
setdiff(gene_conversion$entrezgene_id,unique(gene_df$ensembl_gene_name))
setdiff(gene_conversion$entrezgene_id,unique(gene_df$ensembl_gene_name))
setdiff(gene_conversion$ensembl_gene_id,unique(gene_df$ensembl_gene_name))
leftID <- setdiff(gene_conversion$ensembl_gene_id,unique(gene_df$ensembl_gene_name))
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- leftID
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- leftID
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- leftID
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
library(biomaRt)
genelist <- scan('/Users/boonhao/Documents/NPC_related/Processed_Data/Germline/Micah/Nico EBV neg regulators from CRISPR screen_nr_updated.txt',
character(), quote = "")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl",
host = "https://www.ensembl.org")
gene_conversion <- getBM(
attributes = c("external_gene_name", "ensembl_gene_id",'entrezgene_id',"chromosome_name","start_position"),
filters = "external_gene_name",
values = genelist,
mart = ensembl
)
gene_conversion$ensembl_gene_id <- ifelse(gene_conversion$external_gene_name=='PTEN','ENSG00000171862',gene_conversion$ensembl_gene_id)
library(parallel)  # For parallel execution
options(timeout = 1200)  # Set timeout to 1200 seconds (20 minutes)
snp_results_list <- list()
gene_list <- leftID
for (i in seq_along(gene_list)) {
cat("Fetching SNPs for:", gene_list[i], "\n")
snpmart <- useEnsembl(biomart = "snp", dataset = "hsapiens_snp",host = "https://www.ensembl.org")
# Query SNPs for the gene
snp_data <- getBM(
attributes = c("refsnp_id", "chr_name", "chrom_start", "ensembl_gene_name", "ensembl_gene_stable_id"),
filters = "ensembl_gene",
values = gene_list[i],
mart = snpmart
)
snp_results_list[[gene_list[i]]] <- snp_data
}
exist.location.ID <- retrieve_exLID()
source("../../../Script/basic_functions.R")
setwd('/Users/boonhao/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/uploads/wenhao0117/COVID-19')
source("../../../Script/basic_functions.R")
source("../../../Script/api_key.R")
source("../../../Script/c19_modules/c19_equations.R")
exist.location.ID <- retrieve_exLID()
exist.location.ID
setwd("~/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/Script/c19_modules")
setwd("~/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/Script")
exist.location.ID <- retrieve_exLID()
names(exist.location.ID)
raw.contact.tracing <- read.table("contact_tracing.txt",sep = '\t',header = T)
setwd("~/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/Script/c19_modules")
setwd('/Users/boonhao/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/uploads/wenhao0117/COVID-19')
exist.location.ID <- retrieve_exLID()
names(exist.location.ID)
raw.contact.tracing <- read.table("contact_tracing.txt",sep = '\t',header = T)
raw.contact.tracing$Vector <- ifelse(grepl(',',raw.contact.tracing$Human),1,0)
if(length(intersect(unique(raw.contact.tracing$Location),exist.location.ID$Location))==0){
new_loc <- unique(raw.contact.tracing$Location)
}else{
new_loc <- setdiff(unique(raw.contact.tracing$Location),exist.location.ID$Location)
}
new_loc
lastID <- nrow(exist.location.ID)
newID <- paste("L",c((lastID+1):(lastID+length(new_loc))),sep="")
newID
geocoding
a <- geocoding(new_loc)
a
new_loc_data <- data.frame(
LID = newID,
Location = new_loc,
LatLng = sapply(a, paste,collapse=",")
)
new_loc_data
new_loc.row <- data.frame(
LID = newID,
Location = new_loc,
Building.Type = NA,
LatLng = sapply(a, paste,collapse=","),
Location.Type=NA,
Q = NA
)
new_loc.row
write.table(new_loc.row,file = "Location_ID.txt",sep = '\t',
append = TRUE,
quote = FALSE,
row.names=F,
col.names=F)
update_loc.node <- read.table("Location_ID.txt",sep = '\t',header = TRUE)
update_loc.node
setwd('/Users/boonhao/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/uploads/wenhao0117/COVID-19')
cs_matrix <- as.matrix(read.table('contact_matrix.txt',sep = '\t',header = TRUE, col.names = TRUE))
cs_matrix <- read.table('contact_matrix.txt',sep = '\t',header = TRUE, col.names = TRUE)
cs_matrix <- read.table('contact_matrix.txt',sep = '\t')
cs_matrix
cs_matrix <- as.matrix(read.table('contact_matrix.txt',sep = '\t'))
cs_matrix
l <-  as.matrix(cs_matrix)%*%t(cs_matrix)
l
View(exist.location.ID)
# Prepare edges
df <- read.table('/Users/boonhao/Documents/GitHub(personal)/BNM-Workbench/backend/uploads/wenhao0117/COVID-19/Human_Node.txt')
df
# Prepare edges
df <- read.table('/Users/boonhao/Documents/GitHub(personal)/BNM-Workbench/backend/uploads/wenhao0117/COVID-19/Human_Node.txt',
header = T)
df
edges <- df %>% select(from = Human, to = Location.ID)
library(tidygraph)
library(ggraph)
library(dplyr)
edges <- df %>% select(from = Human, to = Location.ID)
edges
# Create node list
nodes <- data.frame(name = unique(c(edges$from, edges$to)))
nodes <- nodes %>%
mutate(type = ifelse(grepl("^L", name), "Location", "Human"))
# Create graph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
library(tidygraph)
library(ggraph)
library(dplyr)
# Prepare edges
df <- read.table('/Users/boonhao/Documents/GitHub(personal)/BNM-Workbench/backend/uploads/wenhao0117/COVID-19/Human_Node.txt',
header = T)
edges <- df %>% select(from = Human, to = Location.ID)
# Create node list
nodes <- data.frame(name = unique(c(edges$from, edges$to)))
# Add a type column (Human or Location)
nodes <- nodes %>%
mutate(type = ifelse(grepl("^L", name), "Location", "Human"))
# Create graph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
# Plot
ggraph(graph, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(color = type), size = 3) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
scale_color_manual(values = c("Human" = "black", "Location" = "orange")) +
theme_void()
# Plot
bnm_plot <- ggraph(graph, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(color = type), size = 3) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
scale_color_manual(values = c("Human" = "black", "Location" = "orange")) +
theme_void()
bnm_plot
library(tidygraph)
library(ggraph)
library(dplyr)
# Prepare edges
df <- read.table('/Users/boonhao/Documents/GitHub(personal)/BNM-Workbench/backend/uploads/wenhao0117/COVID-19/Human_Node.txt',
header = T)
edges <- df %>% select(from = Human, to = Location.ID)
# Create node list
nodes <- data.frame(name = unique(c(edges$from, edges$to)))
# Add a type column (Human or Location)
nodes <- nodes %>%
mutate(type = ifelse(grepl("^L", name), "Location", "Human"))
# Create graph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
# Plot
bnm_plot <- ggraph(graph, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(color = type), size = 3) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
scale_color_manual(values = c("Human" = "black", "Location" = "orange")) +
theme_void()
png(filename = 'contact_diagram.png')
bnm_plot
dev.off()
setwd("~/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/Script")
library(tidygraph)
library(ggraph)
library(dplyr)
# Prepare edges
df <- read.table('/Users/boonhao/Documents/GitHub(personal)/BNM-Workbench/backend/uploads/wenhao0117/COVID-19/Human_Node.txt',
header = T)
edges <- df %>% select(from = Human, to = Location.ID)
# Create node list
nodes <- data.frame(name = unique(c(edges$from, edges$to)))
# Add a type column (Human or Location)
nodes <- nodes %>%
mutate(type = ifelse(grepl("^L", name), "Location", "Human"))
# Create graph
graph <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
# Plot
bnm_plot <- ggraph(graph, layout = "fr") +
geom_edge_link(color = "grey") +
geom_node_point(aes(color = type), size = 3) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
scale_color_manual(values = c("Human" = "black", "Location" = "orange")) +
theme_void()
png(filename = 'contact_diagram.png')
bnm_plot
dev.off()
setwd('/Users/boonhao/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/uploads/wenhao0117/COVID-19')
setwd('/Users/boonhao/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/uploads/wenhao0117/COVID-19')
png(filename = 'contact_diagram.png',res = 300)
bnm_plot
dev.off()
png(filename = 'contact_diagram.png',units = 'px',res = 300)
bnm_plot
dev.off()
png(filename = 'contact_diagram.png',units = 'px',res = 100)
bnm_plot
dev.off()
png(filename = 'contact_diagram.png',bg = NULL,res = 100)
bnm_plot
dev.off()
png(filename = 'contact_diagram.png',bg = 'white',res = 100)
bnm_plot
dev.off()
png(filename = 'contact_diagram.png',bg = 'white',res = 100,pointsize = 0.1)
bnm_plot
dev.off()
setwd("~/Documents/GitHub(personal)/test_BNM/bnm_workbench/backend/Script/c19_modules")
source("../../../Script/c19_modules/plotContactGraph.R")
